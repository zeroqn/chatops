name: Integration test from PR
# Triggered use /itest comment from pr

on:
  issue_comment:
    types: [created]

jobs:
  pr-info:
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/itest')
    runs-on: ubuntu-20.04
    steps:
      - name: Query author repository permissions
        uses: octokit/request-action@v2.x
        id: user_permission
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.event.sender.login }}/permission
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # restrict /itest to users with admin or write permission
      # see https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#get-repository-permissions-for-a-user
      - name: Check if user does have correct permissions
        if: contains('admin write', fromJson(steps.user_permission.outputs.data).permission)
        id: check_user_perm
        run: |
          echo "User '${{ github.event.sender.login }}' has permission '${{ fromJson(steps.user_permission.outputs.data).permission }}' allowed values: 'admin', 'write'"
          echo "::set-output name=allowed_user::true"
    outputs:
      allowed_user: ${{ steps.check_user_perm.outputs.allowed_user }}

  integration-test:
    needs: pr-info
    if: needs.pr-info.outputs.allowed_user == 'true' && github.event.issue.pull_request && startsWith(github.event.comment.body, '/itest')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/github-script@v3
        id: get_pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }
      - uses: actions/checkout@v2
        with:
          repository: ${{ fromJSON(steps.get_pr.outputs.result).head.repo.full_name }}
          fetch-depth: 0
          ref: ${{ fromJSON(steps.get_pr.outputs.result).head.ref }}

      - name: Get the commit SHA that triggered the workflow
        id: get_commit_sha
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Get components commit ref
        id: get_components_commit_ref
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {COMMENT_BODY} = process.env
            core.info(`comment body ${COMMENT_BODY}`);

            const GODWOKEN_COMP  = 'godwoken'
            const GODWOKEN_SCRIPTS_COMP = 'godwoken-scripts'
            const GODWOKEN_POLYJUICE_COMP = 'godwoken-polyjuice'

            const GODWOKEN_REF_PAT = /godwoken: (.*)/g;
            const GODWOKEN_SCRIPT_REF_PAT = /godwoken-scripts: (.*)/g;
            const GODWOKEN_POLYJUICE_REF_PAT = /godwoken-polyjuice: (.*)/g;

            const components = [GODWOKEN_COMP, GODWOKEN_SCRIPTS_COMP, GODWOKEN_POLYJUICE_COMP]
            const ref_pats = [GODWOKEN_REF_PAT, GODWOKEN_SCRIPT_REF_PAT, GODWOKEN_POLYJUICE_REF_PAT]

            let components_commit_ref = {}
            components.forEach((comp, idx) => {
              const match = ref_pats[idx].exec(`${COMMENT_BODY}`)
              if (match) {
                components_commit_ref[comp] = match[1]
              }
            })
            core.info(JSON.stringify(components_commit_ref))

            return components_commit_ref

      - name: Get components commit url
        id: get_components_commit_url
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            core.info(`context repo ${context.repo.repo}`)

            const GITHUB_ROOT_URL = 'https://github.com'
            const GODWOKEN_OWNER = 'nervosnetwork'
            // NOTE: ensure values are same as component values above
            const GODWOKEN_REPO  = 'godwoken'
            const GODWOKEN_SCRIPTS_REPO  = 'godwoken-scripts'
            const GODWOKEN_POLYJUICE_REPO = 'godwoken-polyjuice'

            const COMPONENT_OWNER = `${GITHUB_ROOT_URL}/${GODWOKEN_OWNER}`
            const component_refs = JSON.parse(`${{ steps.get_components_commit_ref.outputs.result }}`)

            let components_commit_url = {}
            const component_repos = [GODWOKEN_REPO, GODWOKEN_SCRIPTS_REPO, GODWOKEN_POLYJUICE_REPO]
            for (component_repo of component_repos) {
              // Default branch commit
              let component_commit_url = `${COMPONENT_OWNER}/${component_repo}/commit`

              // If commit ref is specified in comment body, use that one
              if (component_refs[component_repo] && component_repo !== context.repo.repo) {
                component_commit_url = `${default_commit_url}/${component_refs[component_repo]}`
              }

              // Use pr commit ref for current repo
              if (component_repo === context.repo.repo) {
                component_commit_url = `${default_commit_url}/${{ steps.get_commit_sha.outputs.sha_short }}`
              }

              components_commit_url[component_repo] = component_commit_url
            }
            core.info(JSON.stringify(components_commit_url))

            return components_commit_url

      - name: Write a comment on the PR with sha commit
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const components_commit_url = JSON.parse(`${{ steps.get_components_commit_url.outputs.result }}`)

            let comment_body = ''
            for (const component of components_commit_url) {
              const commit_url = components_commit_url[component]
              comment_body = `${comment_body}\n${component} commit: ${commit_url}`
            }

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment_body,
            })
